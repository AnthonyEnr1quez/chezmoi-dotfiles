## Setup antidote https://getantidote.github.io/install
antidote_dir=${ZDOTDIR:-~}/.antidote
plugins_txt=${ZDOTDIR:-~}/.zsh_plugins.txt
static_file=${ZDOTDIR:-~}/.zsh_plugins.zsh

zstyle ':antidote:bundle' use-friendly-names 'yes'

# Clone antidote if necessary and generate a static plugin file.
if [[ ! $static_file -nt $plugins_txt ]]; then
  [[ -e $antidote_dir ]] ||
    git clone --depth=1 git@github.com:mattmc3/antidote.git $antidote_dir
  (
    source $antidote_dir/antidote.zsh
    [[ -e $plugins_txt ]] || touch $plugins_txt
    antidote bundle <$plugins_txt >$static_file
  )
fi

# Uncomment this if you want antidote commands like `antidote update` available
# in your interactive shell session:
autoload -Uz $antidote_dir/functions/antidote

# source the static plugins file
source $static_file

# cleanup vars
unset antidote_dir plugins_file static_file

## setup abbr
ABBR_USER_ABBREVIATIONS_FILE=~/.zsh_abbr

## history
HISTFILE=$HOME/.zsh_history
HISTSIZE=100000
SAVEHIST=$HISTSIZE

bindkey "^[[A" history-substring-search-up
bindkey "^[[B" history-substring-search-down

setopt hist_reduce_blanks # remove superfluous blanks from history items
setopt inc_append_history # save history entries as soon as they are entered
setopt share_history # share history between different instances of the shell

## completions https://thevaluable.dev/zsh-completion-guide-examples/
setopt auto_cd # cd by typing directory name if it's not a command
setopt auto_list # automatically list choices on ambiguous completion
setopt auto_menu # automatically use menu completion
setopt always_to_end # move cursor to end if word had one match

# https://zsh.sourceforge.io/Doc/Release/Completion-System.html
zstyle ':completion:*' menu select # use tab/arrows to select completion in menu
zstyle ':completion:*' completer _expand _extensions _complete _ignored _approximate # enable approximate matches for completion

# kubectl completions
kubectl_completion_cache_dir=${ZDOTDIR:-~}/.cache/kubectl
if (( $+commands[kubectl] )); then
  # If the completion file does not exist, generate it and then source it
  # Otherwise, source it and regenerate in the background
  if [[ ! -f "$kubectl_completion_cache_dir/completions/_kubectl" ]]; then
    mkdir -p $kubectl_completion_cache_dir/completions | kubectl completion zsh | tee "$kubectl_completion_cache_dir/completions/_kubectl" >/dev/null
    source "$kubectl_completion_cache_dir/completions/_kubectl"
  else
    source "$kubectl_completion_cache_dir/completions/_kubectl"
    kubectl completion zsh | tee "$kubectl_completion_cache_dir/completions/_kubectl" >/dev/null &|
  fi
fi
unset kubectl_completion_cache_dir

## kube-ps1 support
PROMPT='$(kube_ps1)'$PROMPT
